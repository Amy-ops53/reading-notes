1) 제 2장, 느려진 서비스, 어디부터 봐야할까 

ㅁ 서버 성능과 관련있는 것
1. 응답 시간 : 말 그대로 사용자의 요청을 처리하는데 걸리는 시간
* 응답 시간을 줄일 때에는 DB 연동과 API 연동이 로직 수행 시간보다 훨씬 비중을 많이 차지하기 때문에,
이 시간들에 집중한다.
2. 처리량 : 단위 시간당 시스템이 처리하는 작업량
* TPS : 초당 트랜잭션 수
* RPS : 초당 요청 수

ㅁ 성능 문제의 원인을 찾았다면
1. 수직확장 vs 수평확장
- 수직 확장 : CPU, 메모리, 디스크 등의 자원 증가 시키는 방법으로 급한 불을 끌 수 있음
(* 동시 요청이 늘어나면 서버 메모리를 증설하기만 해도 TPS를 늘릴 수 있음)
- 수평 확장 : 서버를 늘려서 처리량을 증가 시킴

ㅁ DB 커넥션 풀을 사용하는 이유?
- 서버와 DB는 네트워크 통신을 통해 연결이 되는데, 연결하고 종료하는 시간이 쿼리 실행 시간보다 더 많은 비중을 차지함

2) 성능을 좌우하는 DB 설계와 쿼리
ㅁ DB 풀 스캔 발생 조건
- 풀 스캔이란? 테이블의 모든 데이터를 순차적으로 읽는 것.
- 쿼리의 WHERE 절에 있는 조건에 대응하는 인덱스가 없을 때 발생

ㅁ 응답 데이터 압축
- 사용자의 네트워크 속도가 느리면 응답 시간이 길어지기 때문에 서버에서 전송하는 데이터의 크기를 제어함으로써
응답시간을 크게 줄일 수 있음
ex) 텍스트 데이터를 gzip으로 압축하면 70% 이상 크기를 줄일 수 있음

ㅁ 클라이언트 캐시
- 클라이언트가 응답 데이터를 일정 시간 동안 저장해둘 수 있도록 설정 가능
- 서버 입장에서도 전송해야 할 트래픽이 줄어들어 네트워크 전송 비용을 아낄 수 있음
ex) Cache-Control: max-age=60

ㅁ 타임아웃
처음 연동하는 서비스라면 타임아웃을 적정한 시간으로 설정하고 나서 "추이"를 보면서 조정하는 게 좋다.

연결 타임아웃은 3~5초, 읽기 타임아웃은 5~30초

